// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Projekt2025.Models;

public partial class fgonline_dk_db_zooContext : DbContext
{
    public fgonline_dk_db_zooContext()
    {
    }

    public fgonline_dk_db_zooContext(DbContextOptions<fgonline_dk_db_zooContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Calendar> Calendars { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<Login> Logins { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<NewsletterSub> NewsletterSubs { get; set; }

    public virtual DbSet<StudyProgram> StudyPrograms { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=mssql7.unoeuro.com;Initial Catalog=fgonline_dk_db_zoo;Persist Security Info=True;User ID=fgonline_dk;Password=aRmng352pGzdce9kwDbH;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admin__719FE4E828FCE3E3");
        });

        modelBuilder.Entity<Calendar>(entity =>
        {
            entity.HasKey(e => e.CalendarId).HasName("PK__Calendar__53CFDBAD10B1EBE0");

            entity.Property(e => e.CalendarId).ValueGeneratedNever();

            entity.HasOne(d => d.Events).WithMany(p => p.Calendars)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Calendar__EventI__59FA5E80");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__Events__7944C870879663A8");

            entity.Property(e => e.EventDateTimeEnd).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.EventDateTimeStart).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Login>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Login__349DA586C78D03A4");

            entity.HasOne(d => d.Member).WithMany(p => p.Logins).HasConstraintName("FK__Login__MemberID__73BA3083");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.MemberId).HasName("PK__Member__0CF04B3874CF7C2C");

            entity.HasOne(d => d.Study).WithMany(p => p.Members).HasConstraintName("FK__Member__StudyID__52593CB8");

            entity.HasMany(d => d.Events).WithMany(p => p.Members)
                .UsingEntity<Dictionary<string, object>>(
                    "MemberEventList",
                    r => r.HasOne<Event>().WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__MemberEve__Event__7B5B524B"),
                    l => l.HasOne<Member>().WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__MemberEve__Membe__7A672E12"),
                    j =>
                    {
                        j.HasKey("MemberId", "EventId").HasName("PK__MemberEv__1B6407BF416C84C3");
                        j.ToTable("MemberEventList");
                        j.IndexerProperty<int>("MemberId").HasColumnName("MemberID");
                        j.IndexerProperty<int>("EventId").HasColumnName("EventID");
                    });
        });

        modelBuilder.Entity<NewsletterSub>(entity =>
        {
            entity.HasKey(e => e.Email).HasName("PK__Newslett__A9D10535E4710A6F");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.SubscribedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<StudyProgram>(entity =>
        {
            entity.HasKey(e => e.StudyId).HasName("PK__StudyPro__1B4BFBF80F703AC1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}